package kemalkeskin.rentABook.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import kemalkeskin.rentABook.business.abstracts.AuthorService;
import kemalkeskin.rentABook.business.requests.author.CreateAuthorRequest;
import kemalkeskin.rentABook.business.responses.author.GetAllAuthorResponse;
import kemalkeskin.rentABook.business.responses.author.GetByIdAuthorResponse;
import kemalkeskin.rentABook.core.mapper.ModelMapperService;
import kemalkeskin.rentABook.dataAccess.abstracts.AuthorRepository;
import kemalkeskin.rentABook.entitities.concretes.Author;
import lombok.AllArgsConstructor;
@Service
@AllArgsConstructor
public class AuthorManager implements AuthorService {

	private AuthorRepository authorRepository;
	private ModelMapperService modelMapperService;
	
	
	@Override
	public List<GetAllAuthorResponse> getAll() {
		List<Author> authors=authorRepository.findAll();
		List<GetAllAuthorResponse>getAllAuthorResponses=authors.stream().map(author->this.modelMapperService.forResponse().map(author, GetAllAuthorResponse.class)).collect(Collectors.toList());
		return getAllAuthorResponses;
	
	}
	
	@Override
	public GetByIdAuthorResponse getById(int id) {
		
		Author author=authorRepository.findById(id).orElseThrow();
		modelMapperService.forResponse().map(author, GetByIdAuthorResponse.class);
		
		return null;
	}

	@Override
	public void add(CreateAuthorRequest createAuthorRequest) {
		
		Author author=this.modelMapperService.forRequest().map(createAuthorRequest, Author.class);
		this.authorRepository.save(author);
		
	}
	
	
	

	
	
	@Override
	public Author giveAuthorId(int id) {
	
		return authorRepository.findById(id).orElseThrow();
				
	}













	

}
