package kemalkeskin.rentABook.business.concretes;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import kemalkeskin.rentABook.business.abstracts.AuthorService;
import kemalkeskin.rentABook.business.abstracts.BookService;
import kemalkeskin.rentABook.business.requests.book.CreateBookRequest;
import kemalkeskin.rentABook.business.responses.book.GetAllBookResponse;
import kemalkeskin.rentABook.business.responses.book.GetByIdBookResponse;
import kemalkeskin.rentABook.core.mapper.ModelMapperService;
import kemalkeskin.rentABook.dataAccess.abstracts.BookRepository;
import kemalkeskin.rentABook.entitities.concretes.Author;
import kemalkeskin.rentABook.entitities.concretes.Book;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class BookManager implements BookService {
	
	private BookRepository bookRepository;
	private AuthorService authorService;
	private ModelMapperService modelMapperService;
	
	@Override
	public List<GetAllBookResponse> getAll() {
		List<Book> books=bookRepository.findAll();
		List<GetAllBookResponse>getAllBookResponses=books.stream().map(book->this.modelMapperService.forResponse().map(book, GetAllBookResponse.class)).collect(Collectors.toList());
		return getAllBookResponses;
	}
	
	
	@Override
	public GetByIdBookResponse getById(int id) {
		Book book=bookRepository.findById(id).orElseThrow();
		GetByIdBookResponse getByIdBookResponse=modelMapperService.forResponse().map(book, GetByIdBookResponse.class);
		return getByIdBookResponse;
	}
	
	
	@Override
	public void add(CreateBookRequest createBookRequest) {
//		Book book=this.modelMapperService.forRequest().map(createBookRequest, Book.class);
//		this.bookRepository.save(book);
		
		Book book2=new Book();
		book2.setName(createBookRequest.getBookName());
		book2.setPrice(createBookRequest.getBookPrice());
		Author author=authorService.giveAuthorId(createBookRequest.getAuthorId());
		if(Objects.nonNull(author)) {
			book2.setAuthor(author);
		}
		bookRepository.save(book2);
	}

	

}
